# -*- coding: utf-8 -*-
"""Αντίγραφο του TrainYolov3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_uDoehGobi6jFxZmx1Lp2ha7AhegIDc2
"""

#Step:1 # Check if NVIDIA GPU is enabled
!nvidia-smi

from google.colab import drive
drive.mount('/content/gdrive')
!ln -s /content/gdrive/
!ls /content/gdrive/MyDrive/yolov3

# Commented out IPython magic to ensure Python compatibility.
# Configure
# %cd /content/gdrive/MyDrive/yolov3/darknet
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile

# Compile
!make

#Step 4: Make a copy of yolov3.cfg
!cp cfg/yolov3.cfg cfg/yolov3_training.cfg
#!cp cfg/Gaussian_yolov3_BDD.cfg cfg/Gaussian_yolov3_BDD_training.cfg

#Step 5: Change lines in yolov3.cfg file
!sed -i 's/batch=1/batch=64/' cfg/yolov3_training.cfg
!sed -i 's/subdivisions=1/subdivisions=16/' cfg/yolov3_training.cfg
!sed -i 's/max_batches = 500200/max_batches = 6000/' cfg/yolov3_training.cfg
!sed -i '610 s@classes=80@classes=3@' cfg/yolov3_training.cfg
!sed -i '696 s@classes=80@classes=3@' cfg/yolov3_training.cfg
!sed -i '783 s@classes=80@classes=3@' cfg/yolov3_training.cfg
!sed -i '603 s@filters=255@filters=24@' cfg/yolov3_training.cfg
!sed -i '689 s@filters=255@filters=24@' cfg/yolov3_training.cfg
!sed -i '776 s@filters=255@filters=24@' cfg/yolov3_training.cfg
!sed -i '22 s@steps=400000,450000@steps=4800,5400@' cfg/yolov3_training.cfg

#Step 6: Create .names and .data files.
!echo -e 'traffic light green\ntraffic light red\ntraffic light yellow' > data/obj.names
!echo -e 'classes= 3\ntrain  = data/train.txt\nvalid  = data/test.txt\nnames = data/obj.names\nbackup = /content/gdrive/MyDrive/yolov3' > data/obj.data
#!echo classes=3 > obj.data
#!echo train=train.txt >> obj.data
#!echo valid=test.txt >> obj.data
#!echo names=obj.names >> obj.data
#!echo backup=backup >> obj.data

#Step 7: Save yolov3_training.cfg and obj.names files in Google Drive.
!cp cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/yolov3_testing.cfg
!cp data/obj.names /content/gdrive/MyDrive/yolov3/classes.txt

#Step 8: Unzip the images dataset.
!mkdir data/obj
!unzip /content/gdrive/MyDrive/yolov3/train.zip -d data/obj/train

!mkdir data/obj/test
!unzip /content/gdrive/MyDrive/yolov3/valid.zip -d data/obj/valid

!mkdir data/obj/valid
!unzip /content/gdrive/MyDrive/yolov3/test.zip -d data/obj/test

import glob
images_list = glob.glob("/content/gdrive/MyDrive/yolov3/darknet/data/obj/train/*.png")
with open("data/train.txt", "a") as f:
     f.write("\n".join(images_list))

#Step 9:Create train.txt file.
import glob
images_list = glob.glob("/content/gdrive/MyDrive/yolov3/darknet/data/obj/train/*.jpg")
with open("data/train.txt", "w") as f:
    f.write("\n".join(images_list))

images_list = glob.glob("/content/gdrive/MyDrive/yolov3/darknet/data/obj/valid/*.jpg")
with open("data/test.txt", "w") as f:
    f.write("\n".join(images_list))

images_list = glob.glob("/content/gdrive/MyDrive/yolov3/darknet/data/obj/valid/*.png")
 with open("data/test.txt", "a") as f:
     f.write("\n".join(images_list))

import glob 
images_list = glob.glob("/content/gdrive/MyDrive/yolov3/darknet/data/obj/test/*.jpg")
with open("data/valid.txt", "w") as f:
    f.write("\n".join(images_list))

# Step 10:Download pre-trained weights for the convolutional layers file.
!wget https://pjreddie.com/media/files/darknet53.conv.74

#!./darknet detector train data/obj.data cfg/yolov3_training.cfg darknet53.conv.74 -dont_show
# Uncomment below and comment above to re-start your training from last saved weights
#!./darknet detector train data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/yolov3_training_last.weights -dont_show -map
#!./darknet detector train data/obj.data cfg/yolov3_custom.cfg /mydrive/yolov3/yolov3_training_last.weights -dont_show
#!./darknet detector train data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/yolov3_training_final.weights | tee log.txt

# Step 11:Start training.
#!./darknet detector train data/obj.data cfg/yolov3_training.cfg darknet53.conv.74 -dont_show -map | tee output.log
!./darknet detector train data/obj.data cfg/yolov3_training.cfg darknet53.conv.74 -dont_show -map | tee output.log
#!./darknet detector train data/obj.data cfg/yolov3_training.cfg -dont_show -map | tee output.log
#!./darknet detector train data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/yolov3_training_last.weights -dont_show -map | tee output.log

!./darknet detector train data/obj.data cfg/yolov3_training.cfg darknet53.conv.74 2>1 | tee visualization/output.log

# Commented out IPython magic to ensure Python compatibility.
# define helper functions
def imShow(path):
  import cv2
  import matplotlib.pyplot as plt
#   %matplotlib inline

  image = cv2.imread(path)
  height, width = image.shape[:2]
  resized_image = cv2.resize(image,(3*width, 3*height), interpolation = cv2.INTER_CUBIC)

  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB))
  plt.show()

# use this to upload files
def upload():
  from google.colab import files
  uploaded = files.upload() 
  for name, data in uploaded.items():
    with open(name, 'wb') as f:
      f.write(data)
      print ('saved file', name)

# use this to download a file  
def download(path):
  from google.colab import files
  files.download(path)

imShow('chart.png')

# Commented out IPython magic to ensure Python compatibility.
# need to set our custom cfg to test mode 
# %cd cfg
!sed -i 's/batch=64/batch=1/' yolov3_training.cfg
!sed -i 's/subdivisions=16/subdivisions=1/' yolov3_training.cfg
# %cd ..

#import matplotlib.pyplot as plt
#import numpy
#from IPython.display import Image, display
#import glob
# run your custom detector with this command (upload an image to your google drive to test, thresh flag sets accuracy that detection must be in order to show it)
#!./darknet detector test data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/yolov3_training_last.weights /content/gdrive/MyDrive/yolov3/test/1.jpg -thresh 0.3
#plt.imshow(numpy.float('predictions.jpg'))
#plt.imshow('predictions.jpg')
#for imageName in glob.glob('/content/gdrive/MyDrive/yolov3/test/*.jpg'):
#!./darknet detector test data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/yolov3_training_last.weights /content/gdrive/MyDrive/yolov3/test/103214_png.rf.5aa05ad187f9ae26d2c12fdbf940b283.jpg -thresh 0.3
!./darknet detector test data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/weights/Carla_and_Real-world-images_withoutCarlavalid_/yolov3_training_best.weights /content/Frame_traffic_lights136961.jpg -thresh 0.3
#!./darknet detector test data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/weights/Carla_and_blurred_images/yolov3_training_final.weights -dont_show < /content/gdrive/MyDrive/yolov3/darknet/data/valid.txt > result.txt
#!./darknet detector test data/obj.data cfg/yolov3_training.cfg /content/gdrive/MyDrive/yolov3/weights/yolov3_training_last.weights < /content/gdrive/MyDrive/yolov3/darknet/data/valid.txt > result.txt
imShow('predictions.jpg')
